<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.xingsfdz</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <groupId>com.xingsfdz</groupId>
  <artifactId>demo-web</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>demo-web Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
  <properties>
  	<java.version>1.8</java.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  
  <build>
    <finalName>demo-web</finalName>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.1</version>
            <configuration>
                <source>${java.version}</source>
                <target>${java.version}</target>
                <encoding>UTF-8</encoding>
            </configuration>
        </plugin>
        <!-- 不同环境的配置文件选择 -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.6</version>
            <executions>
                <execution>
                    <id>copy-resources</id>
                    <phase>compile</phase>
                    <goals>
                        <goal>copy-resources</goal>
                    </goals>
                    <configuration>
　　　　　　　　　　　　　　<!-- 覆盖原有文件 -->
　　　　　　　　　　　　　　<overwrite>true</overwrite><!-- 覆盖原有的文件 -->
                        <outputDirectory>${project.build.outputDirectory}</outputDirectory><!-- 这个目录等于target/classes -->
                        <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->
                        <!-- 待处理的资源定义 -->
                        <resources>
                            <resource>
                                <!-- 指定resources插件处理哪个目录下的资源文件 -->
                                <directory>src/main/config/${package.environment}</directory>
                                <!-- <directory>src/main/config/db-config.properties</directory> -->
                                <filtering>false</filtering>
                            </resource>
                        </resources>
                        
<!--                         <files>
                            <file>src/main/config/db-config.properties</file>
                        </files>
				       <useDefaultDelimiters>false</useDefaultDelimiters>      
				         <delimiters>
				            <delimiter>${*}</delimiter>
				        </delimiters>
				       <encoding>UTF-8</encoding> -->
                    </configuration>
                    <inherited></inherited>
                </execution>
            </executions>
        </plugin>
        
        
        
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>properties-maven-plugin</artifactId>
            <version>1.0.0</version>
            <executions>
                <execution>
                    <id>default-cli</id>
                    <phase>initialize</phase>
                    <goals>
                        <goal>read-project-properties</goal>
                        <goal>write-project-properties</goal>
                    </goals>
                    <configuration>
                        <files>
                            <file>src/main/config/db-config.properties</file>
                        </files>
                        <outputFile>${build.directory}/jdbc.properties</outputFile>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        
    </plugins>
    
    <!-- 标识src/main/resources目录下面的/spring/*目录下面的文件不打包 excludes 排除不包括-->
    <resources>
	    <resource>
		    <directory>src/main/resources</directory><!-- 标识打包resources目录下面的所有文件 -->
	        <filtering>true</filtering><!-- 可以使resources下面的文件获取profiles下面的 properties的属性值，比如jdbc.url可以通过${jdbc.url}-->
 		    <excludes>
		        <exclude>spring/*</exclude><!-- 表示排除spring目录下面的 -->
		    </excludes> 
		</resource>
     </resources>
    
</build>

<profiles>
    <profile>
        <id>alibaba</id>
        <activation>
            <activeByDefault>false</activeByDefault>
        </activation>
        <properties>
            <package.environment>Alibaba</package.environment>
        </properties>
    </profile>
    <profile>
        <id>tencent</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        <properties>
            <package.environment>tencent</package.environment>
            <jdbc.url>http://localhost:9200</jdbc.url>
        </properties>
    </profile>
    <profile>
        <id>product</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        <properties>
            <package.environment>product</package.environment>
        </properties>
    </profile>
</profiles>


</project>
